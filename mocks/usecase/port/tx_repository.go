// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TxRepository is an autogenerated mock type for the TxRepository type
type TxRepository[T interface{}] struct {
	mock.Mock
}

// DoInTx provides a mock function with given fields: ctx, f
func (_m *TxRepository[T]) DoInTx(ctx context.Context, f func(context.Context) (*T, error)) (*T, error) {
	ret := _m.Called(ctx, f)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) (*T, error)) *T); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, func(context.Context) (*T, error)) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTxRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTxRepository creates a new instance of TxRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTxRepository[T interface{}](t mockConstructorTestingTNewTxRepository) *TxRepository[T] {
	mock := &TxRepository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
